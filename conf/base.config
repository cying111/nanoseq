/*
 * -------------------------------------------------
 *  nf-core/nanoseq Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

// Use this flag if using GPUs with Singularity
if (params.guppy_gpu) {
  singularity.runOptions = '--nv'
}

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 72.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }

  // Process-specific containers
  withName:CheckSampleSheet {
    container = 'quay.io/biocontainers/multiqc:1.8--py_1'
  }
  withName:Guppy {
    if (params.guppy_gpu) {
      container = 'nanozoo/guppy_gpu:3.2.2-1--e90fbfe'
      clusterOptions = params.gpu_cluster_options
    } else {
      container = 'genomicpariscentre/guppy:3.2.2'
    }
  }
  
  withName:Qcat {
    container = 'quay.io/biocontainers/qcat:1.1.0--py_0'
  }
  
  withName:PycoQC {
    container = 'quay.io/biocontainers/pycoqc:2.2.4--py_0'
  }
  withName:NanoPlotSummary {
    container = 'quay.io/biocontainers/nanoplot:1.28.1--py_0'
  }
  withName:NanoPlotFastQ {
    container = 'quay.io/biocontainers/nanoplot:1.28.1--py_0'
  }
  withName:FastQC {
    container = 'quay.io/biocontainers/fastqc:0.11.8--2'
  }
  withName:GetChromSizes {
    container = 'quay.io/biocontainers/samtools:1.9--h10a08f8_12'
  }
  withName:GTFToBED {
    container = 'quay.io/biocontainers/perl:5.22.0.1--0'
  }
  withName:MiniMap2Index {
    container = 'quay.io/biocontainers/minimap2:2.17--h8b12597_1'
  }
  withName:MiniMap2Align {
    container = 'quay.io/biocontainers/minimap2:2.17--h8b12597_1'
  }
  withName:GraphMap2Index {
    container = 'quay.io/biocontainers/graphmap:0.6.3--he513fc3_0'
  }
  withName:GraphMap2Align {
    container = 'quay.io/biocontainers/graphmap:0.6.3--he513fc3_0'
  }
  withName:SortBAM {
    container = 'quay.io/biocontainers/samtools:1.9--h10a08f8_12'
  }
  withName:BAMToBedGraph {
    container = 'quay.io/biocontainers/bedtools:2.29.0--hc088bd4_3'
  }
  withName:BedGraphToBigWig {
    if ({ task.exitStatus in [255] }) { errorStrategy = 'ignore' }
    container = 'quay.io/biocontainers/ucsc-bedgraphtobigwig:357--h35c10e6_3'
  }
  withName:BAMToBed12 {
    container = 'quay.io/biocontainers/bedtools:2.29.0--hc088bd4_3'
  }
  withName:Bed12ToBigBed {
    if ({ task.exitStatus in [255] }) { errorStrategy = 'ignore' }
    container = 'quay.io/biocontainers/ucsc-bedtobigbed:357--h35c10e6_3'
  }
  withName:output_documentation {
    container = 'quay.io/biocontainers/r-rmarkdown:0.9.5--r3.3.2_0'
  }
  withName:get_software_versions {
    cache = false
    container = 'quay.io/biocontainers/multiqc:1.8--py_1'
  }
  withName:MultiQC {
    container = 'quay.io/biocontainers/multiqc:1.8--py_1'
  }
}
